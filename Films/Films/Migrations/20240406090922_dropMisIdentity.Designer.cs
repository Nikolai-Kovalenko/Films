// <auto-generated />
using System;
using Films.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Films.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240406090922_dropMisIdentity")]
    partial class dropMisIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Films.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("Parent_category_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Parent_category_id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Films.Models.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("Release")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("Films.Models.Film_сategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("FilmId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsFilmIderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UsFilmIderId");

                    b.ToTable("Film_categories");
                });

            modelBuilder.Entity("Films.Models.Category", b =>
                {
                    b.HasOne("Films.Models.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("Parent_category_id");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Films.Models.Film", b =>
                {
                    b.HasOne("Films.Models.Category", null)
                        .WithMany("Films")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("Films.Models.Film_сategory", b =>
                {
                    b.HasOne("Films.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Films.Models.Film", "Film")
                        .WithMany()
                        .HasForeignKey("UsFilmIderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("Films.Models.Category", b =>
                {
                    b.Navigation("Films");
                });
#pragma warning restore 612, 618
        }
    }
}
